%% Flap Sizing Program
%% Tyson Chen
%%%%%%%%%%%%%%%%%%%%%%%%%%
%performs flap sizing based on Young, A.D., "The Aerodynamic Characteristics of Flaps", Aeronautical Research Council Reports and
%Memoranda, R&M 2622, 1953.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%
%first input a target CL, CL generated by wing, flap span ratio b_f/b
%program varies flap deflection to find chord ratio 
%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%
%ASSUMPTIONS
%critical case for flap sizing is landing approach, where CL_max is
%needed

%THIS CAN BE REFINED WITH A TAKEOFF MODEL
%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%
%UPDATES TO BE MADE
%automatically obtain CL generated by wing based on speed, altitude, alpha
%by using MainFunction.m and developing takeoff model
%%%%%%%%%%%%%%%%%%%%%%%%%%

%housekeeping 
clc; clear; close all;

%adding interpolated .csv from filepath
%addpath flap_digitization;
addpath digitizer files
%importing constants from excel sheet
% Import data file
DragBuildUp = importfileTEST('DragBuildUp.xlsx');
% Take individual variables from excel sheet
for i=1:14      %Plane property section
    assignin('base',DragBuildUp{i,2},DragBuildUp{i,3});
end

%inputting required values

%stall speed 76.43 kts
%approach speed 148.42 ft/s 
V_A = 148.41;                    %in ft/s
q = 0.5 * 0.002378 * V_A^2;    %approach dynamic pressure at sea level
CL_W = W/(q*S);                 %input CL generated by the wing at conditions
CL_target = 2.0;                %input targeted CL for wing and flaps combination

deltaCL = CL_target - 0.9*CL_W;
bf_b = 0.55;                    %input ratio of flap span to wing span



%% analysis section (interpolating data, solving for chord ratio

deflection_start = 0;       %degrees
deflection_end = 80;        %degrees
deflection_interval = 10;   %degrees

deflections = deflection_start:deflection_interval:deflection_end;
init_arr = zeros(length(deflections),1);
[lambda1, lambda2, lambda22, lambda3, delta1, delta2, delta3, K, mu1, mu2] = deal(init_arr);
FA_F6 = FA_F6fun(A);

                      %iterator index
for j=1:length(deflections)

    lambda2(j) = lambda2fun(deflection(j), t_c);
    lambda3(j) = lambda3fun(bf_b);
    %delta1(j) = delta1fun
    delta2(j) = delta2fun(deflection(j), t_c);
    delta3(j) = delta3fun(bf_b);
    %mu1(j) = mu1fun
    mu2(j) = mu2fun(bf_b);
    K(j) = Kfun(bf_b);
    
    %calculate cf_c flap chord ratio
    lambda1(j) = deltaCL / (FA_F6 * lambda2(j) * -)
end



%% functions for interpolation

function [lambda2] = lambda2fun(deflection, t_c)
%
    % Import data sets
    data = importfileGeneral("lambda2.csv",4); % Call function to get first data set
    

    % Extract x and y data from the first data set
    % Assume data has four columns: x, y for curve 1, y for curve 2, y for curve 3
    x1 = data(:, 1); % First column is x data
    y1_1 = data(:, 2); % Second column is y data for curve 1
    y1_2 = data(:, 3); % Third column is y data for curve 2
    y1_3 = data(:, 4); % Fourth column is y data for curve 3
  
    % Perform interpolation for the first data set using C_LT as the query point
    y1_1_interp = interp1(x1, y1_1, deflection, 'linear', 'extrap');
    y1_2_interp = interp1(x1, y1_2, deflection, 'linear', 'extrap');
    y1_3_interp = interp1(x1, y1_3, deflection, 'linear', 'extrap');

    % Linearly interpolate between the three curves based on t_c

    if t_c >=0.12 && t_c<=0.21
        % Interpolate between curve 1 and curve 2
        lambda2 = y1_1_interp + (y1_2_interp - y1_1_interp) * t_c / 0.5;
    elseif t_c<0.12 || t_c >0.3
        error("t/c must be between 0.12 and 0.3");
    else
        % Interpolate between curve 2 and curve 3
        lambda2 = y1_2_interp + (y1_3_interp - y1_2_interp) * (t_c - 0.5) / 0.5;
    end
    % Output the interpolated results
end

function [lambda3] = lambda3fun(bf_b)
%
    % Import data sets
    data = importfileGeneral("lambda3.csv",2); % Call function to get first data set
    

    % Extract x and y data from the first data set
    % Assume data has four columns: x, y for curve 1, y for curve 2, y for curve 3
    x1 = data(:, 1); % First column is x data
    y1_1 = data(:, 2); % Second column is y data for curve 1
 
  
    % Perform interpolation for the first data set using C_LT as the query point
    lambda3 = interp1(x1, y1_1, bf_b, 'linear', 'extrap');
     
end


function [delta2] = delta2fun(deflection, t_c)
%
    % Import data sets
    data = importfileGeneral("delta2.csv",4); % Call function to get first data set
    

    % Extract x and y data from the first data set
    % Assume data has four columns: x, y for curve 1, y for curve 2, y for curve 3
    x1 = data(:, 1); % First column is x data
    y1_1 = data(:, 2); % Second column is y data for curve 1
    y1_2 = data(:, 3); % Third column is y data for curve 2
    y1_3 = data(:, 4); % Fourth column is y data for curve 3
  
    % Perform interpolation for the first data set using C_LT as the query point
    y1_1_interp = interp1(x1, y1_1, deflection, 'linear', 'extrap');
    y1_2_interp = interp1(x1, y1_2, deflection, 'linear', 'extrap');
    y1_3_interp = interp1(x1, y1_3, deflection, 'linear', 'extrap');

    % Linearly interpolate between the three curves based on t_c

    if t_c >=0.21 && t_c<=0.30
        % Interpolate between curve 1 and curve 2
        delta2 = y1_1_interp + (y1_2_interp - y1_1_interp) * t_c / 0.5;
    elseif t_c<0.12 || t_c >0.3
        error("t/c must be between 0.12 and 0.3");
    else
        % Interpolate between curve 2 and curve 3
        delta2 = y1_2_interp + (y1_3_interp - y1_2_interp) * (t_c - 0.5) / 0.5;
    end
    % Output the interpolated results
end

function [delta3] = delta3fun(bf_b)
%
    % Import data sets
    data = importfileGeneral("delta3.csv",2); % Call function to get first data set
    

    % Extract x and y data from the first data set
    % Assume data has four columns: x, y for curve 1, y for curve 2, y for curve 3
    x1 = data(:, 1); % First column is x data
    y1_1 = data(:, 2); % Second column is y data for curve 1
 
  
    % Perform interpolation for the first data set using C_LT as the query point
    delta3 = interp1(x1, y1_1, bf_b, 'linear', 'extrap');
     
end

function [mu2] = mu2fun(bf_b)
%
    % Import data sets
    data = importfileGeneral("mu2.csv",2); % Call function to get first data set
    

    % Extract x and y data from the first data set
    % Assume data has four columns: x, y for curve 1, y for curve 2, y for curve 3
    x1 = data(:, 1); % First column is x data
    y1_1 = data(:, 2); % Second column is y data for curve 1
 
  
    % Perform interpolation for the first data set using C_LT as the query point
    mu2 = interp1(x1, y1_1, bf_b, 'linear', 'extrap');
     
end

function [K] = Kfun(bf_b)
%
    % Import data sets
    data = importfileGeneral("K.csv",2); % Call function to get first data set
    

    % Extract x and y data from the first data set
    % Assume data has four columns: x, y for curve 1, y for curve 2, y for curve 3
    x1 = data(:, 1); % First column is x data
    y1_1 = data(:, 2); % Second column is y data for curve 1
 
  
    % Perform interpolation for the first data set using C_LT as the query point
    K = interp1(x1, y1_1, bf_b, 'linear', 'extrap');
     
end

function [FA_F6] = FA_F6fun(A)
%
    % Import data sets
    data = importfileGeneral("FA_F6.csv",2); % Call function to get first data set
    

    % Extract x and y data from the first data set
    % Assume data has four columns: x, y for curve 1, y for curve 2, y for curve 3
    x1 = data(:, 1); % First column is x data
    y1_1 = data(:, 2); % Second column is y data for curve 1
 
  
    % Perform interpolation for the first data set using C_LT as the query point
    FA_F6 = interp1(x1, y1_1, A, 'linear', 'extrap');
     
end